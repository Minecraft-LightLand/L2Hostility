import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.165'
    id 'net.darkhax.curseforgegradle' version '[1.1.24,)'
    id "at.stnwtr.gradle-secrets-plugin" version "1.0.1"
    id "com.modrinth.minotaur" version "2.+"
}

version = mod_version
group = 'dev.kxmc'

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java {
    withSourcesJar()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

sourceSets{
    client{}
    server{}
    data{}
    common{}
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'info'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        modSource project.sourceSets.client
        modSource project.sourceSets.common
    }
    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        modSource project.sourceSets.server
        modSource project.sourceSets.common
    }
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        modSource project.sourceSets.server
        modSource project.sourceSets.common
    }
    data {
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        modSource project.sourceSets.data
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version, neo_version_range: neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors            : mod_authors, mod_description: mod_description,
            l2library_version_range: l2library_version_range,
            curios_version_range   : curios_version_range,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jar {
    manifest {
        attributes([
                "Automatic-Module-Name"   : "${mod_id}",
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "xkmc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "xkmc",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : "${mod_id}.mixins.json"
        ])
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven { // Registrate
        url "https://maven.ithundxr.dev/snapshots"
    }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    mavenLocal();
}

if (lljij.toBoolean()) {

    tasks.jarJar.configure {
        archiveClassifier.set('')
    }

    jar {
        archiveClassifier.set('slim')
    }

}

dependencies {

    def dataImpl = { str ->
        compileOnly str
        runtimeOnly str
    }

    def commonImpl = { str ->
        compileOnly str
        commonRuntimeOnly str
    }

    implementation "com.tterrag.registrate:Registrate:${registrate_version}"
    implementation "dev.xkmc:l2serial:${l2serial_ver}"
    implementation "dev.xkmc:l2modularblocks:${l2modularblocks_ver}"
    implementation "dev.xkmc:l2tabs:${l2tabs_ver}"
    implementation "dev.xkmc:l2menustacker:${l2menustacker_ver}"
    implementation "dev.xkmc:l2itemselector:${l2itemselector_ver}"

    implementation jarJar(group: 'dev.xkmc', name: 'l2core', version: "[${l2core_ver},)")

    implementation jarJar(group: 'dev.xkmc', name: 'l2magic', version: "[${l2magic_ver},)")
    implementation jarJar(group: 'dev.xkmc', name: 'l2damagetracker', version: "[${l2damagetracker_ver},)")
    implementation jarJar(group: 'dev.xkmc', name: 'fast_projectile_api', version: "[${fast_projectile_api_ver},)")
    implementation jarJar(group: 'dev.xkmc', name: 'mob_weapon_api', version: "[${mob_weapon_api_ver},)")

    implementation "dev.xkmc:l2library:${l2library_ver}"
    implementation "dev.xkmc:l2backpack:${l2backpack_ver}"
    implementation "dev.xkmc:l2complements:${l2complements_ver}"
    implementation "dev.xkmc:l2weaponry:${l2weaponry_ver}"
    implementation "dev.xkmc:l2archery:${l2archery_ver}"

    runtimeOnly "dev.xkmc:modulargolems:${modulargolems_ver}"
    runtimeOnly "dev.xkmc:danmaku_api:${danmaku_api_ver}"
    runtimeOnly "dev.xkmc:better_creative_tabs:0.1.2"

    implementation "mezz.jei:jei-${jei_minecraft_version}:${jei_version}"
    implementation "vazkii.patchouli:Patchouli:${patchouli_ver}"
    implementation "curse.maven:jade-324717:5813144"

    //implementation "curse.maven:adorned-1036809:5740650"

    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"
    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"
    //dataRuntimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"
    //commonRuntimeOnly "maven.modrinth:accessories:1.1.0-beta.5+1.21.1"
    //commonRuntimeOnly "maven.modrinth:accessories-cc-layer:9.0.12+1.21.1"

    //implementation "curse.maven:embeddium-908741:5681729"
    commonRuntimeOnly "maven.modrinth:sodium:mc1.21-0.6.0-beta.2-neoforge"
    commonRuntimeOnly "curse.maven:irisshaders-455508:5765375"
    implementation "curse.maven:geckolib-388172:5763144"
    implementation "curse.maven:cloth-config-348521:5729127"
    implementation "curse.maven:the-twilight-forest-227639:5759335"
    implementation "curse.maven:lionfish-api-1001614:6168249"
    implementation "curse.maven:lendercataclysm-551586:6196331"

    dataImpl "curse.maven:mutant-monsters-852665:5742611"
    dataImpl "curse.maven:bosses-of-mass-destruction-forge-941573:6117186"
    dataImpl "curse.maven:cerbons-api-955605:6006403"
    dataImpl "curse.maven:puzzles-lib-495476:6095894"

    implementation "curse.maven:apothic-attributes-898963:6148951"
    implementation "curse.maven:placebo-283644:6105436"
    implementation "curse.maven:gateways-to-eternity-417802:6021376"

    commonImpl "curse.maven:apotheosis-313970:6148732"
    commonImpl "curse.maven:apothic-enchanting-1063926:6084297"
    commonImpl "curse.maven:apothic-spawners-986583:6148923"
    commonImpl "curse.maven:kubejs-238086:5810100"
    commonImpl "curse.maven:rhino-416294:6184623"

}


tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = secrets.get("curseforge_token")
    def mainFile = upload(project.curseforge_project, new File("./build/libs/${mod_id}-${mod_version}.jar"))
    mainFile.changelog = new File('./changelog.txt').text.split("\n\n\n")[0]
    mainFile.addEnvironment("Client", "Server")
    mainFile.addGameVersion("1.21.1")
    mainFile.addModLoader("NeoForge")
    mainFile.addRequirement("l2library", "l2-complements", "curios", "patchouli")
    mainFile.addOptional(
            "alexs-caves",
            "ars-nouveau",
            "bosses-of-mass-destruction-forge",
            "gateways-to-eternity",
            "geckolib",
            "ice-and-fire-dragons",
            "jade",
            "jei",
            "lendercataclysm",
            "mowzies-mobs",
            "mutant-monsters",
            "the-twilight-forest")
    mainFile.releaseType = "beta"
    disableVersionDetection()
}

modrinth {
    token = secrets.get("modrinth_token")
    projectId = project.modrinth_project
    versionName = "L2Hostility ${project.mod_version}"
    versionNumber = project.mod_version
    versionType = "beta"
    uploadFile = new File("./build/libs/${mod_id}-${mod_version}.jar")
    gameVersions = ["1.21.1"]
    loaders = ["neoforge"]
    changelog = new File('./changelog.txt').text.split("\n\n")[0]
    dependencies {
        required.project "l2library"
        required.project "l2-complements"
        required.project "curios"
        required.project "patchouli"
        optional.project "alexs-caves"
        optional.project "ars-nouveau"
        optional.project "bosses-of-mass-destruction-forge"
        optional.project "geckolib"
        optional.project "ice-and-fire-dragons"
        optional.project "jade"
        optional.project "jei"
        optional.project "l_enders-cataclysm"
        optional.project "mutant-monsters"
    }
}